# how I was overwriting the ImagePOints Stuff

def scale_flow_3(flow):
    """
    Assume coords are in unit scale -1/1 and order x,y,r
    and that they need to be need scaling to pixels in order y,x,r
    """
    w2, h2 = flow.size[0]//2, flow.size[1]//2
    r = np.sqrt((w2 * flow.flow[0])**2 + (w2 * flow.flow[1])**2)
    flow.flow = torch.Tensor([h2 + (h2 * flow.flow[1]), w2 + (w2 * flow.flow[0]), r])[None]
    return flow

class XYRImagePoints(ImagePoints):
    "Support applying transforms to a `flow` of points."
    def __init__(self, xyr:list, scale:bool=True, y_first:bool=True):
        flow = FlowField(flow=xyr,size=[1,3])
        if scale: flow = scale_flow_3(flow)
        if y_first: flow.flow = flow.flow.flip(1)
        self._flow = flow
        self._affine_mat = None
        self.flow_func = []
        self.sample_kwargs = {}
        self.transformed = False
        self.loss_func = MSELossFlat()

class XYRPointsLabelList(ItemList):
    "`ItemList` for points."
    #_processor = PointsProcessor
    def __init__(self, items:Iterator, **kwargs):
        super().__init__(items, **kwargs)
        self.loss_func = MSELossFlat()

    def get(self, i):
        o = super().get(i)
        return XYRImagePoints(FlowField(_get_size(self.x,i), o), scale=True)

    def analyze_pred(self, pred, thresh:float=0.5): return pred.view(-1,2)
    def reconstruct(self, t, x): return XYRImagePoints(FlowField(x.size, t), scale=False)
    
class XYRPointsItemList(MImageList):
    _label_cls,_square_show_res = XYRPointsLabelList,False